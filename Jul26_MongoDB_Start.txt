MongoDB

1. https://www.mongodb.com/ 이동
2. Product - Community Edition 클릭
3. Download Community 클릭
4. version 5.0.28 다운로드 (win64, .msi)
5. 실행
6. Next 넘기다가 Complete 누르기
7. Install MongoD as a Service - 체크 해제
  : Windows에서 GUI 프로그램을 제어하겠다
  => 우리는 명령어로 제어할거라서...
8. Install MongoDB Compass - 체크 해제
  : MongoDB 접속 GUI 프로그램
  => 우리는 명령어로 제어할거라서...
-------------------------------------------------
MongoDB 서버 ON
1) DB 파일이 저장될 폴더 확보
C:\Users\sdedu\Desktop\mDB
2) MongoDB 실행파일이 있는 위치
C:\Program Files\MongoDB\Server\5.0\bin
	=> cmd 실행

3) mongod --dbpath DB파일저장될경로 --bind_ip_all
mongod --dbpath C:\Users\sdedu\Desktop\mDB --bind_ip_all
-------------------------------------------------
MongoDB 서버 OFF
서버 ON cmd에서 Ctrl + C or cmd창 닫기
-------------------------------------------------
접속하기
MongoDB실행파일이 있는 경로에서
	cmd - mongo
-------------------------------------------------
몽고디비 6버전 이상부터 mongo 명령어가 사라져서
5버전대로 설치!! (6버전 이상부터는 mongoshell을 설치해서 사용해야 함)
-------------------------------------------------
정형 데이터 - 미세먼지
번호	위치	미세먼지	초미세먼지
1	강남구	25.0	10.0

비정형 데이터 - 블로그 글, 뉴스 기사

RDB-SQL (Structured Query Language) (ex: Oracle, MySQL, MariaDB, ...)
	테이블을 만들고... (자료형, 용량 다 세팅)
	그 규칙에 맞지 않으면... => 에러!!
	=> 정형 데이터

NoSQL (No SQL, Non-Relational Optional DataBase SQL) (ex: MongoDB, ElasticSearch, ...)
	=> 자유 !!!
--------------------------------------------------
MongoDB
	NoSQL 계열
	Node.js (JavaScript back-end) 팀에서 만든 DB => JavaScript로 제어	
	테이블 => JS배열
	데이터 => JS객체

	크로스 플랫폼의 document 지향 Database
	높은 성능 (high performance)
	높은 사용성 (high availability)
	쉬운 확장성 (ease scalability) 등을 제공

		[RDBMS와 비교] (용어)
	Oracle			MongoDB
	Database			Database
	Table			Collection
	Tuple / row		Document
	Column			Field
	Primary key		Primary key (Default : _id)

	1. Database
	하나의 데이터베이스에는 여러개의 컬렉션을 가질 수 있음
	
	2. Collection
	Document의 그룹이며, RDBMS의 'Table' 개념

	3. Document
	하나의 키(Key)와 값(Value)의 집합으로 이루어져 있음
	동일한 필드 안에 다른 타입의 데이터를 가질 수 있음
--------------------------------------------------------------------------------
만들어진 database 확인
	show dbs
내가 현재 사용하고 있는 database 확인
	db
db 사용하기
	DB를 정의하는 게 없음
	사용하기만 존재
	사용할 때 해당 DB이름이 없으면
		=> 알아서 만들어 줌

	use DB명
	use test
DB 제거하기
	db.dropDatabase();
-----------------------------------------------------------------------------------
CRUD
	use jul26_student	

	현재 데이터베이스의 사용 현황
	db.stats()
	bytes 단위로 사용현황을 조회

<insert>
db.collection명.insert( { 속성명: 값, 속성명: 값, ... } );

-- 학생의 이름, 나이 => 5개정도 insert / collection명 : jul26_student
db.jul26_student.insert({name:'park', age:16});
db.jul26_student.insert({name:'kim',age:18});
db.jul26_student.insert({name:'jae',age:20});
db.jul26_student.insert({name:'jung',age:22});
db.jul26_student.insert({name:'lee',age:25});

	primary key - '_id' 필드
	따로 지정을 안해주면 자동으로 생성
	not null - 의미 없음

db.jul26_student.find();
----------------------------------------------------------------------------
여러개를 추가 : 배열을 활용 -> 데이터를 담아주기
coffee => PK지정(커피 이름), 커피 가격 => 5개 / jul26_coffee 컬렉션명

use jul26_coffee

db.jul26_coffee.insert([
	{_id:'latte', price:2500},
	{_id:'americano', price:2400},
	{_id:'black', price:3000},
	{_id:'espresso', price:1600},
	{_id:'vanilla latte', price:2600}
]);

db.jul26_coffee.find()
----------------------------------------------------------------------------
OracleDB : server > DB > tablespace > table > data
MongoDB : server > DB >              > JS배열 > JS객체

< SELECT >
- 결과가 JS배열 속에 JS객체의 형태로 나올 수 밖에...
	=> JSON, python의 list + dict

전체 조회
	db.collection명.find();

조건 검색
	db.collection명.find( {필드명 : 값} );

-- 가격이 3000원인 커피 정보 조회
	(where c_price = 3000)
	db.jul26_coffee.find({price:3000});
	
	이상, 이하, 초과, 미만
	db.collection명.find({필드명 : { "연산자": 값 } });
	연산자 : $lt, $lte, $gt, $gte
	
	2500원을 넘는 가격의 커피 정보 조회
	db.jul26_coffee.find({price: {"$gt": 2500}});

	- 문자열 포함 검색
	(where _id like '%latte%')
	글자 포함검색 연산자 : $regex

	db.jul26_coffee.find({_id : { "$regex": "latte" } });
------------------------------------------------------------------------
< Update > 
	db.collection명.update( 찾을거, 바꿀거 );
	db.jul26_coffee.update( {_id : "americano"}, { price: 5000} );

	위의 방식으로는 한계가 있어서.....
	db.collection명.update( 찾을거, { "$set" : { 바꿀거 } } );
	db.jul26_coffee.update( {_id: "espresso"}, { "$set" : { price : 4000 } } );

	- 가격이 4000원 이상인 커피를 모두 무료('free') 로
	db.jul26_coffee.update( {price: {"$gte": 4000}}, { "$set" : { price : "free" } } );	

 	영향을 받을 데이터가 여러개 ? => {multi : true}
	db.jul26_coffee.update( {price: {"$gte": 2000}}, { "$set" : { price : "free" } }, {multi : true} );	
-------------------------------------------------------------------------
< Delete >
	db.collection명.remove( 찾을거 );
	- 가격이 100원 이상인거 삭제
	db.jul26_coffee.remove( {price: {"$gte": 100}});	
-------------------------------------------------------------------------








